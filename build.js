import { cp, mkdir, readFile, rm, writeFile } from 'fs/promises'
import esbuild from 'esbuild'
import { minify as minifyHtml } from 'html-minifier'

const srcdir = 'src'
const outdir = 'dist'

const cssFiles = [
	'app.css',
]

const directoriesToCopy = [
	'img',
]

const htmlFiles = [
	'index.html',
]

const jsFiles = [
	'app.js',
	'sw.js',
]

const jsonFiles = [
	'manifest.json',
]

const run = async () => {
	// delete the outdir if it exists to make sure there are no leftovers
	try {
		await rm(outdir, { recursive: true })
	} catch (err) {
		if (err.code !== 'ENOENT') throw err
	}

	// re-create the outdir
	await mkdir(outdir, { recursive: true })

	// HTML files
	for (const file of htmlFiles) {
		const raw = await readFile(`${srcdir}/${file}`, 'utf-8')
		const minifed = minifyHtml(raw, {
			collapseBooleanAttributes: true,
			collapseWhitespace: true,
			conservativeCollapse: true,
			decodeEntities: true,
			includeAutoGeneratedTags: false,
			preserveLineBreaks: true,
			removeAttributeQuotes: true,
			removeComments: true,
			removeEmptyAttributes: true,
			removeOptionalTags: true,
			removeRedundantAttributes: true,
			removeScriptTypeAttributes: true,
			removeStyleLinkTypeAttributes: true,
			trimCustomFragments: true,
		})
		await writeFile(`${outdir}/${file}`, minifed)
	}

	// JSON files
	for (const file of jsonFiles) {
		const raw = await readFile(`${srcdir}/${file}`, 'utf-8')
		const minifed = JSON.stringify(JSON.parse(raw))
		await writeFile(`${outdir}/${file}`, minifed)
	}

	// CSS and JavaScript files
	await esbuild.build({
		outdir,

		bundle: false,
		minify: true,

		entryPoints: [
			...cssFiles,
			...jsFiles,
		].map((path) => `${srcdir}/${path}`),
	})

	// copy directories recursively
	for (const dir of directoriesToCopy) {
		await cp(`${srcdir}/${dir}`, `${outdir}/${dir}`, { recursive: true })
	}
}

run()
